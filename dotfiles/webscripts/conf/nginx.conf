
include user.include;
worker_processes  1;
error_log /usr/local/var/log/nginx/error.log debug;

#pid        logs/nginx.pid;
events {
    worker_connections  1024;
}


http {
    rewrite_log on;
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    gzip  off;

    include devroot.include;
    include localports.include;

    # https://www.nginx.com/resources/wiki/modules/substitutions/
    subs_filter_types *;
    
    # This one is most likely for local blurby sending it's port back as absolute uris
    subs_filter "dev.blurb.com:[0-9]{4}" dev.blurb.com igr;
    
    # This is for master version blurby sending absolute uris
    subs_filter master\.eng\.blurb\.([a-z\.]+) dev.blurb.$1 igr;
    subs_filter master(-[a-z]+)\.eng\.blurb\.(com|ca) dev$1.blurb.$2 igr;
    
    # Not sure if this has language specific endpoints...
    subs_filter "services.master.eng.blurb.com" services.dev.blurb.com ig;

    recursive_error_pages on;

    map $http_host $language_id {
        default             en;
        dev-au.blurb.com    en-au;
        dev.blurb.co.uk     en-br;
        dev-br.blurb.com    br;
        dev-nl.blurb.com    nl;
        dev-it.blurb.com    it;
        dev.blurb.fr        fr;
        dev.blurb.de        de;
        dev.blurb.es        es;
        dev.blurb.ca        en-ca;
        dev-fr.blurb.ca     fr-ca;
    }
    map $language_id $master_http_host {
        en      master.eng.blurb.com;
        en-au   master-au.eng.blurb.com;
        en-br   master.eng.blurb.co.uk;
        br      master-br.eng.blurb.com;
        nl      master-nl.eng.blurb.com;
        it      master-it.eng.blurb.com;
        fr      master.eng.blurb.fr;
        de      master.eng.blurb.de;
        es      master.eng.blurb.es;
        en-ca   master.eng.blurb.ca;
        fr-ca   master-fr.eng.blurb.ca;
    }

    # I need to define this so i can use it in proxy_pass,
    # but I need the $master_http_host for the redirect
    upstream master {
        server master.eng.blurb.com;
        server master-au.eng.blurb.com;
        server master.eng.blurb.co.uk;
        server master-br.eng.blurb.com;
        server master-nl.eng.blurb.com;
        server master-it.eng.blurb.com;
        server master.eng.blurb.fr;
        server master.eng.blurb.de;
        server master.eng.blurb.es;
        server master.eng.blurb.ca;
        server master-fr.eng.blurb.ca;
    }

    map "website_site_root" $website_site_root { default $dev_root/website/_site; }
    map "adhoc_site_root" $adhoc_site_root { default $dev_root/ad-hoc/_site; }

    server {
        listen       80;
        server_name  ~^dev(?:-[a-z]+)?\.blurb\.(?:[a-z]+)$;

        expires -1h;

        # These are all dynamic, based on what's in your vars.conf.
        # If it's set to 1, the file will be local.<name>.locations, if not, it's master.<name>.locations
        include link.buildkit.locations.include;
        include link.blurby.locations.include;
        include link.dashboard.locations.include;
        include link.adhoc.locations.include;
        include link.website.locations.include;
        include link.master-only.locations.include;
        include link.metrics-service.locations.include;

        location / {
            include access-control.conf;
            alias $dev_root/mock-stuff/;
            try_files $uri.html $uri.json @website;
        }

        # error_page 404 = /404.html;

        # location = /404.html {
        #     root $dev_root/web-scripts/conf/error-pages/;
        # }

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

    server {
        listen       80;
        server_name  services.dev.blurb.com;

        location / {
            include access-control.conf;
            alias $dev_root/mock-stuff/;
            try_files $uri.html $uri.json =200 @services-master;
        }

        location @services-master {
            include access-control.conf;
            proxy_set_header Accept-Encoding ""; # to uncompress responses so subs_filter works
            proxy_pass http://services.master.eng.blurb.com;
        }
    }

}
